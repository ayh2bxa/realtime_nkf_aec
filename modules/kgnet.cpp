#include "kgnet.h"
#include <iostream>
#include <utility>
#include "matrix_helper.h"
#include "activations.h"
#include <fstream>
// #include "constants.h"

using namespace std;

void KGNet::transpose(vector<float>& res, vector<float>& input, int rows, int cols) {
     for (int i = 0; i < rows; i++) {
          for (int j = 0; j < cols; j++) {
               int pos1 = i*cols+j;
               int pos2 = j*rows+i;
               res[pos2] = input[pos1];
          }
     }
}

KGNet::KGNet(int L, int fc_dim, int rnn_layers, int rnn_dim, int fftPoints): 
     num_layers(rnn_layers), hidden_dim(rnn_dim),
     a1(-0.23493864f), a2(0.0020070625f),
     num_frames(L), input_dim(fc_dim), complex_gru(fc_dim, rnn_dim), fftPts(fftPoints)
{
     vector<float> data;
     feat_re.resize(fftPts*fc_dim);
     feat_im.resize(fftPts*fc_dim);

     h_rr.resize(fftPts*hidden_dim);
     h_ir.resize(fftPts*hidden_dim);
     h_ii.resize(fftPts*hidden_dim);
     h_ri.resize(fftPts*hidden_dim);

     rnn_out_re1.resize(fftPoints*input_dim);
     rnn_out_im1.resize(fftPoints*input_dim);

     weights1_real = 
     {
          -0.34125897, 0.6683216, -0.27744818, -0.37962124, -0.5898935, -0.05785965, 0.014918286, 0.008980415, -0.05572734,
          -0.48870143, 0.07147747, -0.5269784, 0.7943466, 0.56577694, 0.089595065, -0.012805167, 0.020259619, -0.092879556,
          -0.051495884, -1.0051156, 1.09093, -0.9213773, 0.06923245, -0.0028502122, 0.020502988, -0.0016182198, -0.010070216,
          1.0767002, -0.5106263, -0.9513934, 0.60852444, -0.006963954, 0.0012419411, 0.02986131, -0.0048476444, 0.010660205,
          -0.5110835, -0.6627739, 0.50084263, 1.1254352, -0.13424644, -0.023161206, 0.0026321306, 0.02150588, 0.05242749,
          -0.03052867, 0.033588704, -0.03251915, 0.074668124, 1.8585945, 0.0072283046, -0.050712913, -0.034066163, 0.123674534,
          -0.053593364, -0.10741662, -0.39948207, -0.3346139, 0.00496566, -0.021497803, -0.07102294, -0.06664767, -0.071798325,
          0.44183424, 1.0536745, 1.1940231, 0.7971801, 0.27926895, -0.0047621983, -0.050321255, -0.09628038, -0.100091666,
          -0.23679054, -0.58772993, -0.8167989, -0.72376233, -0.11031972, -0.004629846, -0.00680108, -0.042325664, -0.010241089,
          -0.08595092, 1.0455835, -1.0550224, 0.87467235, -0.08847817, -0.007716208, 0.02105083, 0.009054147, 0.008871524,
          -0.6324588, -0.34014535, -0.5230586, -0.112795554, 0.07261547, 0.028414039, 0.027265033, -0.007893219, -0.010207263,
          0.4832286, 0.5213485, -0.6842855, -0.9928761, 0.4604803, -0.071027234, -0.081472754, 0.03424284, 0.095142625,
          0.4130261, -0.38360095, -0.31309733, 0.095203385, 0.40184492, -0.10926147, 0.098492235, 0.00045267853, -0.035534535,
          -0.03633129, 0.059702948, -0.036019996, 0.03833977, -1.7685189, -0.0069635687, 0.025888322, 0.04458116, 0.17647049,
          0.48411676, -0.22163571, 0.9283399, 0.93150723, -0.07677806, 0.028899679, 0.003609816, -0.026090374, -0.03638281,
          0.063610025, -0.27286044, -0.14201015, 0.43174255, -0.6994003, 0.029359045, -0.047092427, -0.0045086076, 0.0046784948,
          0.87547296, 0.5017473, -0.1646027, -0.6790151, -0.27262574, 0.054115813, 0.06673946, -0.02246202, -0.056269728,
          -0.9648133, 0.30399933, 0.5235879, -0.2510041, -0.04334138, -0.026455114, 0.021527726, -0.0080976775, -0.046533458,
     };
     // weights1_real.resize((2*L+1)*input_dim);
     // transpose(weights1_real, data, input_dim, 2*L+1);

     weights1_imag = 
     {
          0.18614988, -1.3879784, 0.7655571, 0.29575506, -0.012565789, -0.054007288, -0.019805988, 0.09810209, -0.026938397,
          -0.63898194, 0.48843023, -0.5007546, 0.3263715, -0.36892742, -0.0051008016, -0.004457092, 0.0054915887, 0.0014660135,
          -0.3587734, -0.21066917, 0.91346234, -0.7782684, 0.00415561, 0.007978912, 0.008767927, -0.015043563, 0.0097520305,
          -0.38257417, -0.7133318, -0.7158114, -0.45891052, 0.03543163, 0.004181388, -0.0020047887, -0.012184712, -0.0046738707,
          0.41251245, -0.61648273, -0.46421018, 2.0396707, 0.0950539, 0.0042907735, 0.0050344383, -0.009417954, -0.003918595,
          -0.020993596, -0.018414913, -0.033100706, 0.07153043, -1.593092, 0.003937012, 0.062464446, 0.026789604, 0.032267556,
          0.22356696, 0.7987263, 1.282005, 1.0622133, -0.10752207, -0.011681989, -0.006380203, 0.007408373, 0.00276128,
          -0.23983021, 0.3568377, -0.20986605, -0.3880076, 0.044140857, 7.8207326e-05, 0.0012497981, 0.001420293, 0.0036602342,
          0.6536933, -0.27960345, -0.5910112, -0.9564712, 0.10189283, 0.00240637, 0.003285331, -0.0061580674, -0.0019766488,
          -0.23908488, 0.757366, -0.89653045, 0.57126427, 0.021247484, -0.0014001187, -0.0047341953, 0.0018901879, -0.0012789749,
          0.78681177, 1.0518159, 0.39192596, 0.28770697, 0.11334422, -0.0077794194, -0.036975212, -0.026318107, -0.009724345,
          0.64083546, 0.6646788, -0.5836179, -0.7255775, -0.033427496, 0.00070221943, 0.0020518636, 0.005049861, 0.0059672426,
          0.5009761, -0.44944122, -0.3515285, 0.25361782, -0.9575844, -0.009379572, -0.00665251, 0.015179537, 0.008284302,
          0.06186225, 0.19761392, -0.059612926, 0.2271906, 0.8428207, 0.0023296648, -0.048035484, -0.03522154, -0.03944187,
          -0.8994322, -0.06536435, 0.10209452, 0.27626237, -0.007701603, 0.00434434, -0.0055081984, 0.0064952825, 0.008096325,
          0.020588215, -0.23114741, -0.1317611, 0.08171303, 1.7992891, -0.009784126, 0.0042693187, -0.0003239263, 0.0039073154,
          -0.35199997, 0.92897856, 0.011331232, -1.0123324, -0.0256084, -0.0018065961, -0.00067733706, 0.005271187, -0.0032615222,
          -0.55564487, -0.0810058, -0.27130777, 0.2866152, -0.005713917, -0.014110004, -0.0014834057, 0.0062752203, -0.013049599,
     };
     // weights1_imag.resize((2*L+1)*input_dim);
     // transpose(weights1_imag, data, input_dim, 2*L+1);

     weights2_real = 
     {
          0.23963524, -0.074984, 0.017515419, 0.0081635155, -0.0006513985, 0.15419391, -0.28580153, -0.01931357, -0.042647284, -0.0071492465, 0.008808374, 0.28555182, -0.0053484226, -0.0052522393, 0.012789825, 0.0023571511, -0.015419004, -0.1572272,
          0.052836, 0.14825802, 0.334779, 0.82486933, -0.018502895, 0.26821408, -0.8122336, -0.03692986, -0.46291533, -0.13914013, 0.58515376, 0.004399706, -0.3327141, 0.675552, 0.2517224, 0.3171122, -0.6627019, -0.52853,
          0.14696515, -0.14225645, 0.2353817, 0.12398902, 0.19094177, 0.32706353, -0.072084956, -0.12970941, -0.051410113, -0.08403917, 0.43389294, 0.16869667, -0.32872102, 0.10189576, 0.14466262, 0.042361267, -0.2343985, -0.12864456,
          0.24306703, -0.22586407, -0.077049054, 0.13983232, -0.061165124, -0.04503792, 0.035109844, -0.1067895, -0.4615676, 0.010000932, -0.010323087, 0.3517076, 0.08497243, -0.12979043, 0.033338655, 0.068533994, -0.07192549, 0.051397126,
          0.162458, -0.01240242, 0.20050682, -0.19842482, -0.010824851, 0.084561974, -0.0012222072, -0.026208133, -0.014277104, 0.1356959, 0.006112906, 0.27452597, 0.018414479, 0.022987457, -0.013845619, -0.005129273, -0.025861045, 0.003535228,
          -0.13792266, 0.94171125, 0.7135754, 0.7003705, -0.27002922, 0.68551266, -0.15132241, 0.0019899444, -0.10166101, -0.073565826, 0.60672534, 0.17573565, -0.36551622, 0.38847494, -0.0835779, -0.75578874, -0.7072185, 0.18336101,
          0.24249457, -0.34462103, 0.011082364, -0.014045279, 0.2006815, 0.13165224, -0.017159833, -0.24963129, -0.049249407, 0.0077341525, 0.0050122836, 0.38215208, -0.015143303, 0.029723683, -0.081383124, 0.043473218, 0.024143685, -0.009301328,
          -0.091671884, 0.15487336, 0.031689916, 0.09154776, 0.16336085, 0.0033528486, -0.019798646, 0.17069568, -0.1607714, 0.14913675, -0.021393225, 0.029515248, -0.07193011, 0.0340025, -0.0028276423, 0.08954682, 0.016912568, -0.0048468625,
          -0.058148894, -0.13066356, 0.3363789, 0.40423825, -0.18910277, -0.23890144, -0.06640591, -0.1192591, -0.72866046, -0.13553937, 0.0684185, 0.34090358, -0.0567892, 0.08426654, -0.39718848, 0.8463168, -0.37514278, -0.04818774,
          -0.13689142, 0.07071665, 0.24323528, 1.1460019, -0.4151825, 0.03731634, -0.1393211, -0.27873522, -0.39291996, -0.56997913, -0.43560022, 0.36915725, 0.7266964, 0.16173719, -0.13156912, 0.45970508, -0.93974364, 0.5179848,
          -0.26682714, 0.49976456, 0.38397813, 0.809647, 0.5017246, 0.4459087, -0.0061792005, -0.44166377, -0.579056, -0.2921527, 0.34219673, 0.044794478, -0.12631996, -0.012427341, -0.9921977, 0.3347875, -0.30037346, 0.25638047,
          0.27781317, -0.06776624, -0.06505375, 0.14471848, -0.13557471, -0.00036198867, 0.0041618324, -0.13826, -0.1310677, 0.169814, 0.28709134, 0.3307018, -0.20207398, -0.15956433, 0.054266583, 0.027452635, -0.099317096, -0.01017867,
          0.24436569, -0.0038627998, -0.060313, 0.38134867, -0.12861612, 0.38862154, -0.06691193, -0.16707899, -0.2574708, 0.058636427, 0.18987945, 0.27745557, -0.012099268, -0.15091793, -0.016497793, -0.39334613, -0.36594477, 0.1439538,
          0.24203216, -0.08900812, 0.06908933, 0.3239737, -0.06252707, 0.14828552, 0.4068939, -0.088738255, -0.16668746, -0.0052979845, 0.047607586, 0.28365457, -0.162706, -0.28122395, -0.041580718, 0.09484418, -0.16285796, 0.13242806,
          0.12351522, -0.32519978, -0.04657099, 0.17345983, 0.2464818, 0.27766678, -0.0017362875, -0.074021, -0.3223278, -0.07186202, 0.04614861, 0.14254428, -0.098054744, 0.15433015, -0.14353092, 0.07376301, -0.106779404, 0.02712199,
          0.25183246, -0.21921863, 0.1268434, 0.1267918, 0.061876692, 0.2812068, -0.043856934, -0.15408392, -0.01057465, 0.13223909, 0.22211234, 0.22701591, -0.16113211, -0.19808598, 0.023540258, 0.026123619, -0.17255813, -0.07503931,
          -0.060530223, 0.75496024, 0.37335175, 0.7952846, -0.38670388, -0.63296163, 0.14815143, -0.07852907, -0.80973876, -0.011174419, 0.28748313, 0.43354952, -0.5425844, -0.30791783, -0.08973053, 0.426139, -0.41096008, 0.3868062,
          0.25757444, -0.080190815, -0.047332674, -0.0140483435, -0.061017193, 0.25751886, -0.0786351, -0.08794015, -0.016476266, 0.0374443, 0.04829454, 0.3155784, 0.085460745, -0.07068017, 0.034386426, -0.2116333, -0.10502625, 0.08408649,
     };
     // weights2_real.resize(hidden_dim*fc_dim);
     // transpose(weights2_real, data, hidden_dim, fc_dim);

     weights2_imag = 
     {
          -0.020087374, -0.12475391, -0.008241243, -0.017753405, -0.079705216, -0.19398738, -0.07828489, 0.0007745887, -0.018422741, 0.00060028705, 0.030353582, -0.34666094, 0.01767225, -0.016412312, -0.043233927, -0.008144524, -0.00561719, -0.6132029,
          0.049254443, 0.16976649, -0.23564132, -0.23615035, -0.28618822, 0.04049212, 0.20653565, 0.47003275, -0.07723811, -0.31042907, -0.19168717, -0.38897723, 0.8267981, 0.6447021, -0.39746448, 0.13921355, -0.24412398, 0.27712643,
          0.06612154, -0.04579269, 0.061628975, -0.37394843, -0.13493033, -0.058306087, -0.06164799, 0.088603795, 0.010361014, -0.11086939, 0.063745454, -0.42183915, -0.035444826, -0.039859682, -0.1606597, -0.020507129, 0.024288822, -0.03554307,
          -0.00708285, -0.075764045, -0.4949349, -0.16679928, -0.254655, 0.118125565, -0.0112883905, 0.12778185, -0.07462205, -0.109210566, 0.13984628, -0.31639385, 0.19241165, 0.62766886, -0.04664292, -0.9022993, -0.22967412, 0.13360116,
          -0.041529387, -0.2721152, -0.0226652, -0.022269562, -0.0031000858, -0.08051385, 0.15322241, 0.0187727, 0.0059839524, -0.38944116, -0.003927962, -0.34075916, 0.014821809, 0.22674611, -0.13163958, 0.0070418306, -0.055768598, -0.020888189,
          0.0045424146, -0.09294607, 0.006576587, -0.024781872, -0.0961679, -0.02626227, -0.043367445, -0.0008291466, -0.007095836, -0.004990271, 0.01951422, -0.35690272, 0.6698386, -0.060676817, -0.06775146, -0.019553088, 0.0076950984, -0.013111357,
          -0.020813655, 0.1274345, -0.38014576, -0.2578989, -0.4746398, -0.43444997, 0.31999877, 0.3034944, -0.14478372, -0.1347913, 0.0074109575, -0.37214375, -0.023455447, 0.4661227, -0.47128102, 0.6656339, -0.101860665, -0.008135856,
          0.16180156, 0.13161436, -0.010196264, -0.13884787, -0.22482741, 0.08651789, -0.019555943, 0.18865353, -0.025387665, -0.14746493, 0.18472524, -0.25377244, -0.08561022, 0.23470367, -0.05938044, -0.6150149, -0.08738743, -0.09269164,
          0.0868806, -0.18654801, -0.50905454, 0.043149993, -0.2051954, -0.29506606, 0.035238627, 0.10482079, -0.07335218, -0.19655651, 0.1171502, -0.24741057, 0.25165457, 0.3157042, -0.1131365, 0.08088228, -0.009993143, -0.065858476,
          0.06825078, 0.26955196, -0.6782973, -0.09112547, -0.25245136, -0.30112207, 0.037918318, 0.13618475, -0.092864454, -0.027657468, 0.7474416, -0.2549951, -0.26968646, 0.6451062, -0.14147744, -0.040799964, -0.061439663, -0.25185138,
          -0.022608636, -0.22696495, -0.0077398126, 0.0042175422, -0.068462126, 0.009662926, -0.015296491, -0.030138489, 0.023623371, -0.029852241, 0.035456896, -0.3493384, 0.051819336, 0.015476929, -0.03376795, -0.5644773, -0.02554834, -0.071374334,
          0.10764406, 0.2450586, -0.45010048, -0.21615443, -0.50310683, -0.0625046, -0.18436946, 0.25108582, -0.2554468, -0.0674871, 0.089942634, -0.41149634, 0.36100996, 0.38853207, -0.35326046, 0.2212926, -0.30583978, -0.437672,
          -0.046277378, -0.23278116, -0.012033186, 0.006186398, -0.010557388, 0.004706834, 0.046554852, -0.01895442, 0.019686589, -0.21549515, 0.0036472653, -0.4467801, 0.028554512, -0.0069426005, -0.07328772, 0.0031593814, 0.030914223, -0.02566019,
          -0.10954928, -0.3330571, -0.70211685, -0.11864079, -0.57033414, -0.6819922, 0.42166325, 0.30153614, 0.21071468, -0.3169909, 0.121939085, -0.1854678, 0.42925063, 1.3334379, 0.118248336, 0.27938363, -0.39584407, 0.20437413,
          -0.18224306, -0.14652377, -0.25231507, -0.01657933, -0.059899803, -0.20785162, 0.22700852, 0.06623747, 0.062676795, -0.21778151, 0.20090264, -0.2783566, -0.11509938, 0.277192, -0.1442009, -0.11245679, -0.0923042, 0.21000245,
          -0.03904022, 0.32143837, -0.29648733, -0.25952217, -0.29634348, -0.040627632, 1.1780039, 0.22046553, -0.1112326, -0.25943395, 0.13184161, -0.5026886, -0.2416657, 0.6218475, -0.4159363, 0.07344827, -0.18086721, 0.35697326,
          0.033227928, 1.2673614, -0.32877883, -0.7449212, -0.47682858, 0.55088913, 0.3246517, 0.32019123, 0.15922247, 0.09470339, 0.6232575, -0.35155728, 0.16479011, 0.6532884, -0.30852532, -0.034510665, -0.016446533, -0.23425342,
          0.07993566, -0.16321413, -0.29623932, 0.09762507, -0.00575612, -0.12561952, -0.020036846, 0.054718222, 0.0004048193, -0.10984693, 0.06357262, -0.33721215, 0.17921361, 0.108674325, -0.061075047, 0.031964146, 0.024991406, -0.062347014,
     };
     // weights2_imag.resize(hidden_dim*fc_dim);
     // transpose(weights2_imag, data, hidden_dim, fc_dim);

     weights3_real = {
          -0.15724081, -0.81245095, 0.00478708, -0.10698862, 0.17873642, 1.016423, -0.075609244, -0.021068681, -0.7836548, -0.11191018, -0.61011493, 0.12013396, 0.3405331, 0.42387035, -0.54902095, -0.00029988118, 1.1637989, 0.12850274,
          0.1471452, 0.8189542, -0.19318974, 0.06937099, -0.0927694, 0.28685597, -0.119720004, -0.061208606, -0.44821748, 1.0125397, -1.1723619, -0.057840288, 0.57012856, -0.46151865, -0.08666467, 0.13260385, -0.54035896, 0.1540484,
          0.10827294, 1.0083787, 0.17343716, 0.060132783, 0.066667125, -0.43187937, -0.06672233, 0.36557823, 0.49916273, -0.936852, -1.0073832, 0.37358832, -0.25182626, -0.23872297, -0.24707037, -0.28510815, 0.9606908, -0.125393,
          -0.04367902, -0.6973106, -0.5335674, 0.28202373, -0.0012733733, -1.4412904, -0.029335015, 0.12982288, 0.68394864, 1.2783041, -0.4477419, -0.05814771, -0.19649118, 0.24233626, -0.1777866, 0.5627204, 0.86388934, -0.02411126,
     };
     // weights3_real.resize(L*fc_dim);
     // transpose(weights3_real, data, L, fc_dim);

     weights3_imag = {
          0.061963554, 0.6293856, 0.17519492, -0.57572097, -0.26389557, 0.1399401, 0.58406657, -0.027073072, 0.10346181, -0.30452582, -0.10288391, 1.080407, -0.13861881, -0.91195893, -0.7481323, -0.92224824, 0.7071272, -0.11117353,
          0.0053458344, -0.20502283, 0.19412927, -1.0581914, 0.28821748, -0.05915053, 1.0407755, -0.10790867, -0.39685118, -0.12110252, -0.19541553, -0.34059688, 0.06815027, -0.64407915, 0.10862013, 1.2033466, 0.2384392, 0.15667526,
          -0.21880257, 1.3408477, 0.034691203, 0.3406565, 0.22809182, 0.14348748, -0.32669866, -0.020094337, -0.11850359, -1.2455686, 0.029283399, -0.36839128, -0.00037744534, -0.019738272, -0.11277415, 0.58024734, -0.23957145, 0.10145972,
          -0.040403437, -0.25673234, 0.11081339, 0.3294535, -0.11200418, -0.054962646, -0.62601596, 0.7169174, -0.5572681, 0.23118222, 0.1269124, -0.14873162, -0.059197403, -1.5936122, 0.06141129, 0.26354206, 1.7744784, 0.6787406,
     };
     // weights3_imag.resize(L*fc_dim);
     // transpose(weights3_imag, data, L, fc_dim);

     bias1_real = 
     {
          0.00010572388,
          0.006030545,
          0.08464846,
          0.07931186,
          0.068799555,
          -0.00084329187,
          -0.0157299,
          0.062173493,
          0.19246554,
          0.27146447,
          -0.0001318274,
          0.054169327,
          0.0011189148,
          -0.0007369658,
          0.43163696,
          0.003709015,
          0.27065966,
          0.32244024,
     };

     bias1_imag = 
     {
          0.0006020854,
          0.0057563116,
          0.088034295,
          0.040278196,
          0.13240132,
          0.00032359053,
          0.17549269,
          -0.012852461,
          0.1341852,
          0.1834301,
          0.0028143863,
          0.07661756,
          0.012530119,
          0.0010325887,
          0.3933519,
          0.00039404613,
          0.34219834,
          0.05878073,
     };

     bias2_real = 
     {
          0.3676606,
          0.15553541,
          0.10680822,
          -0.013981412,
          0.2245204,
          0.077661335,
          0.20808841,
          -0.076587625,
          -0.009354689,
          -0.21861522,
          0.08863957,
          0.2300074,
          -0.041823726,
          -0.020766176,
          0.10134685,
          -0.37855354,
          0.07186066,
          0.1158816, 
     };

     bias2_imag = 
     {
          -0.11101249,
          -0.0062036477,
          0.112385936,
          -0.0734383,
          -0.06572273,
          0.020604338,
          -0.21380398,
          0.035548475,
          0.11800366,
          -0.08527648,
          -0.09083063,
          -0.08448221,
          -0.02804968,
          -0.10079008,
          -0.10058791,
          -0.10067671,
          0.28611243,
          -0.4445539,
     };

     bias3_real = 
     {
          0.0011953625,
          0.0021512876,
          -0.0017902884,
          0.00044001744,
     };

     bias3_imag =
     {
          4.741021e-05,
          0.004856574,
          0.0008754858,
          0.0047747465, 
     };

     kg_re.resize(fftPoints*num_frames);
     kg_im.resize(fftPoints*num_frames);
}

KGNet::~KGNet() {}

vector<float>& KGNet::get_kg_re() {
     return kg_re;
}

vector<float>& KGNet::get_kg_im() {
     return kg_im;
}

// change the type of input_feature to an iterator
// template <typename V>
void KGNet::forward(V input_feature_re, V input_feature_im) {
     dense(feat_re, weights1_real, 2*num_frames+1, 18, fftPts, input_feature_re, bias1_real, temp);
     dense(feat_im, weights1_imag, 2*num_frames+1, 18, fftPts, input_feature_im, bias1_imag, temp);
     // std::ofstream feature_file("/Users/anthony/Desktop/gerzz/real-time_NKF/modules/my_feat.txt");
     // if (!feature_file) {
     //      std::cerr << "Could not open the input feature file for writing!" << std::endl;
     //      return;
     // }
     // for (int i = 0; i < 513; i++) {
     //      for (int j = 0; j < 18; j++) {
     //           int pos = i*18+j;
     //           feature_file << "(" << feat_re[pos] << ", " << feat_im[pos] << ") ";
     //      }
     //      feature_file << '\n';
     // }
     // feature_file.close();
     // std::cout << "feature written to file successfully!" << std::endl;
     pRelu(feat_re, a1);
     pRelu(feat_im, a1);
     // feat shape is fftPts * input_dim
     complex_gru.forward(feat_re, feat_im, h_rr, h_ir, h_ri, h_ii);
     std::vector<float>& rnn_out_re = complex_gru.get_out_re();
     std::vector<float>& rnn_out_im = complex_gru.get_out_im();
     // ^ rnn_out shape is fftPts * hidden_dim
     dense(rnn_out_re1, weights2_real, hidden_dim, input_dim, fftPts, rnn_out_re, bias2_real, temp);
     dense(rnn_out_im1, weights2_imag, hidden_dim, input_dim, fftPts, rnn_out_im, bias2_imag, temp);
     // ^ rnn_out shape is fftPts * input_dim
     pRelu(rnn_out_re1, a2);
     pRelu(rnn_out_im1, a2);
     dense(kg_re, weights3_real, input_dim, num_frames, fftPts, rnn_out_re1, bias3_real, temp);
     dense(kg_im, weights3_imag, input_dim, num_frames, fftPts, rnn_out_im1, bias3_imag, temp);
     // ^ kg shape is fftPts * num_frames
}